:put 2507001; :local expireMonitor [/certificate find where name="expireMonitor"]; :if ([:len $expireMonitor] = 0) do={ /certificate add name="expireMonitor" unit="0#0#0#0#" days-valid=3650; :set expireMonitor [/certificate find where name="expireMonitor"]; }; :local dateint do={ :local montharray ( "jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec" ); :local days [ :pick $d 4 6 ]; :local month [ :pick $d 0 3 ]; :local year [ :pick $d 7 11 ]; :local monthint ([ :find $montharray $month]); :local month ($monthint + 1); :if ( [len $month] = 1) do={ :local zero ("0"); :return [:tonum ("$year$zero$month$days")]; } else={ :return [:tonum ("$year$month$days")]; } }; :local timeint do={ :local hours [ :pick $t 0 2 ]; :local minutes [ :pick $t 3 5 ]; :return ($hours * 60 + $minutes); }; :local convert do={ :local monthr {"jan";"feb";"mar";"apr";"may";"jun";"jul";"aug";"sep";"oct";"nov";"dec"}; :local dd [:pick $date 8 11]; :local yy [:tonum [:pick $date 0 4]]; :local mm [:tonum [:pick $date 5 7]]; :local mmm "$[:pick $monthr ($mm-1)]"; :local newdate "$mmm/$dd/$yy"; :return $newdate; }; :local getField do={ :local line $1; :local delimiter $2; :local index $3; :local start 0; :local end 0; :local count 0; :do { :set end [:find $line $delimiter $start]; :if ($end = -1) do={ :set end [:len $line]; }; :if ($count = $index) do={ :return [:pick $line $start $end]; }; :set start ($end + [:len $delimiter]); :set count ($count + 1); } while=($end < [:len $line]); :return ""; }; :local date [ /system clock get date ]; :if ([:pick $date 4 5] = "-" and [:pick $date 7 8] = "-" ) do={ :set date [$convert date=$date]; } else={ :set date $date; }; :local time [ /system clock get time ]; :local today [$dateint d=$date] ; :local curtime [$timeint t=$time]; :local tyear [ :pick $date 7 11 ]; :local lyear ($tyear-1); :local statusValue [/certificate get $expireMonitor unit]; :local status [:tonum [$getField $statusValue "#" 0]]; :local start [:tonum [$getField $statusValue "#" 1]]; :local checkUsers [:tonum [$getField $statusValue "#" 2]]; :local lastRun [$getField $statusValue "#" 3]; :if ([($curtime - $start)] > 9 and $status = 1) do={ /certificate set $expireMonitor unit="0#$start#$checkUsers#$lastRun#"; :delay 0.2; :local schowner [/sys sch get [find name=Expire-Monitor] owner]; /sys scr job rem [find where owner=$schowner]; }; :if ($status != 1) do={ :local userlogin [/ip hotspot user find where comment~"/$tyear" || comment~"/$lyear" || comment~"$tyear-" || comment~"$lyear-"]; :local totlogin [:len $userlogin]; /log warning "checking for expired $totlogin users..."; /certificate set $expireMonitor unit="1#$curtime#$totlogin#$time#"; :delay 1; :local ca 0; :local cb 0; :local cc 0; :local cd 0; :foreach i in $userlogin do={ :local comment [ /ip hotspot user get $i comment]; :local expdate ""; :local exptime ""; :if ([:pick $comment 4 5] = "-" and [:pick $comment 7 8] = "-") do={ :set expdate [$convert date=[:pick $comment 0 10]]; :set exptime [:pick $comment 11 [:len $comment]]; :set comment ($expdate . " " . $exptime); }; :local limit [ /ip hotspot user get $i limit-uptime]; :local name [ /ip hotspot user get $i name]; :local gettime [:pick $comment 12 20]; :if ([:pick $comment 3] = "/" and [:pick $comment 6] = "/") do={ :local expd [$dateint d=$comment]; :local expt [$timeint t=$gettime]; :if ($limit != "00:00:01") do={ :if (($expd < $today and $expt < $curtime) or ($expd < $today and $expt > $curtime) or ($expd = $today and $expt < $curtime)) do={ :if ([:pick $comment 21] = "N") do={ [ /ip hotspot user set limit-uptime=1s $i ]; [ /ip hotspot active remove [find where user=$name] ]; } else={ [ /ip hotspot user remove $i ]; [ /ip hotspot active remove [find where user=$name] ]; :set cd ($cc + 1); } } } }; :set cb ($ca + 1); :set ca $cb; :delay 0.2; }; :if ($totlogin = $cb) do={ /certificate set $expireMonitor unit="0#$curtime#$totlogin#$time#"; :delay 1; /log warning "expire monitor done! | $cd removed"; };}
